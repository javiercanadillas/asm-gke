#!/usr/bin/env bash
## This script is work in progress, designed to be run from Cloud Shell
## Javier CaÃ±adillas - javiercm@google.com
#set -x

# Defaults and unmutable vars
readonly SCRIPT_NAME="${0##*/}"
readonly SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
readonly ASM_VER_STRING=istio-1.8.1-asm.5
readonly ASMV=$(echo ${ASM_VER_STRING#*-} | tr \. -)
readonly GCP_ACCOUNT=$(gcloud config get-value account 2>/dev/null)
PROJECT_ID=$(gcloud config get-value project 2>/dev/null)
CLUSTER_ZONE=europe-west1-b
CLUSTER_NAME=gke-asm


config::update_vars() {
  PROJECT_NUMBER=$(gcloud projects describe "${PROJECT_ID}" \
  --format="value(projectNumber)" 2>/dev/null)
  MEMBERSHIP_NAME=${CLUSTER_NAME}-connect
}

info() {
  echo "${SCRIPT_NAME}: ${1}" >&2
}

config::pwd_script_dir() {
  info "Setting working directory at ${SCRIPT_DIR}"
  pushd "${SCRIPT_DIR}" > /dev/null || return
}

config::enable_apis() {
  info "Enabling necessary GCP APIs"
  gcloud services enable \
      container.googleapis.com \
      compute.googleapis.com \
      monitoring.googleapis.com \
      logging.googleapis.com \
      cloudtrace.googleapis.com \
      meshca.googleapis.com \
      meshtelemetry.googleapis.com \
      meshconfig.googleapis.com \
      iamcredentials.googleapis.com \
      anthos.googleapis.com \
      gkeconnect.googleapis.com \
      gkehub.googleapis.com \
      cloudresourcemanager.googleapis.com \
      privateca.googleapis.com
}

config:install_packages() {
  info "Installing siege a a stress tool for the cluster"
  sudo apt -y install siege
}

gke::create_cluster() {
  info "Creating cluster ${CLUSTER_NAME} in zone ${CLUSTER_ZONE}"
  gcloud config set compute/zone ${CLUSTER_ZONE}
  gcloud beta container clusters create ${CLUSTER_NAME} \
      --machine-type=n1-standard-4 \
      --num-nodes=4 \
      --enable-stackdriver-kubernetes \
      --subnetwork=default \
      --release-channel=regular
}

gke::update_labels() {
  info "Updating GKE cluster ${CLUSTER_NAME} with necessary labels"
  gcloud container clusters update $CLUSTER_NAME \
    --update-labels \
    mesh_id=proj-"${PROJECT_NUMBER}",asmv="${ASMV}"
}

gke::enable_workload_identity() {
  info "Enabling workload identity in GKE cluster ${CLUSTER_NAME}"
  gcloud container clusters update ${CLUSTER_NAME} \
  --workload-pool="${PROJECT_ID}".svc.id.goog
}

gke::register_to_environ() {
  info "Registering GKE cluster ${CLUSTER_NAME} to the environ"
  gcloud beta container hub memberships register ${MEMBERSHIP_NAME} \
    --gke-cluster=${CLUSTER_ZONE}/${CLUSTER_NAME} \
    --enable-workload-identity
}

gke::become_cluster_admin() {
  info "Making your account ${GCP_ACCOUNT} cluster admin"
  kubectl create clusterrolebinding cluster-admin-binding \
    --clusterrole cluster-admin \
    --user "${GCP_ACCOUNT}"
}

asm::download_script() {
  info "Downloading script for ASM ${ASM_VER_STRING} and making it executable"
  curl https://storage.googleapis.com/csm-artifacts/asm/install_asm_1.8 > install_asm
  chmod +x install_asm
}

asm::validate() {
  info "Validating ASM installation requirements for cluster ${CLUSTER_NAME}"
  "${SCRIPT_DIR}"/install_asm \
    --project_id "${PROJECT_ID}" \
    --cluster_name "${CLUSTER_NAME}" \
    --cluster_location "${CLUSTER_ZONE}" \
    --mode install \
    --output_dir "${SCRIPT_DIR}" \
    --only_validate
}

asm::install() {
  info "Installing ASM on cluster ${CLUSTER_NAME}"
  "${SCRIPT_DIR}"/install_asm \
    --project_id "${PROJECT_ID}" \
    --cluster_name "${CLUSTER_NAME}" \
    --cluster_location "${CLUSTER_ZONE}" \
    --mode install \
    --output_dir "${SCRIPT_DIR}" \
    --enable_all
}

asm::enable_injection() {
  info "Enabling sidecar injection for the mesh"
  kubectl label namespace default istio-injection- istio.io/rev="${ASMV}" --overwrite
}

app::deploy() {
  pushd ${ASM_VER_STRING} || return >/dev/null
  info "Deploying Bookinfo application pods in cluster ${CLUSTER_NAME}"
  kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
  info "Configuring Istio Ingress Gateway for the application"
  kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
}

app:check_deployment() {
  info "Getting deployed services:"
  # Wait for deployements to be ready
  kubectl wait --for=condition=available --timeout=60s --all deployments
  kubectl get services
  info "Getting deployed pods:"
  kubectl get pods
  info "Check that the app is running (from cluster)"
  # Make sure the ratings pod is available before accessing it
  kubectl wait --for=condition=ready pod -l app=ratings --timeout=60s
  kubectl exec -it "$(kubectl get pod -l app=ratings \
    -o jsonpath='{.items[0].metadata.name}')" \
    -c ratings -- curl productpage:9080/productpage | grep -o  "<title>.*</title>"
}

app:get_gateway_ip() {
  info "Getting the Istio Ingress Gateway IP address"
  # Loop until the load balancer is up and running
  while [ -z "${GATEWAY_IP}" ]; do
      GATEWAY_IP=$(kubectl get svc istio-ingressgateway -o=jsonpath='{.status.loadBalancer.ingress[0].ip}' -n istio-system)
      sleep 1
  done
  info "IP is ${GATEWAY_IP}"
}

main::install() {
  config::pwd_script_dir
  config::enable_apis
  gke::create_cluster
  gke::update_labels
  gke::enable_workload_identity
  gke::register_to_environ
  gke::become_cluster_admin
  asm::download_script
  asm::validate
  asm::install
  asm::enable_injection
  app::download_istio_package
  app::deploy
  app:check_deployment
  app:get_gateway_ip
}

main::destroy() {
  info "Destroying cluster ${CLUSTER_NAME} and associated configuration and installation objects"
  config::pwd_script_dir
  # Remove cluster
  gcloud container clusters delete "${CLUSTER_NAME}" --zone "${CLUSTER_ZONE}" --quiet

  # Unregister cluster from Hub
  gcloud container hub memberships delete "${MEMBERSHIP_NAME}" --quiet

  # Delete local files
  rm -rf "${SCRIPT_DIR:?}/${ASM_VER_STRING}"
  rm -rf "${SCRIPT_DIR:?}/asm"
  rm -- *-manifest-*.yaml
  rm install_asm
}

main::show_config() {
  cat << EOF
Script name: ${SCRIPT_NAME}
Google Cloud Project: ${PROJECT_ID}
GCP account: ${GCP_ACCOUNT}
Cluster Name: ${CLUSTER_NAME}
Region/Zone: ${CLUSTER_ZONE}
ASM Version: ${ASM_VER_STRING}
Istio Output Directory: ${SCRIPT_DIR}
EOF
}

main::usage() {
  cat << EOF
Usage: ${SCRIPT_NAME} [COMMAND] [OPTIONs]...
Creates/destroys GKE cluster on GCP with ASM deployed in it.

COMMAND:
  install                           Installs the GKE cluster, ASM and deploys
                                    Bookinfo application
  destroy                           Destroys all created infrastructure,
                                    cleaning up the project
  show-config                       Outputs configuration used by the script

OPTIONS:
  -p|--project-id <PROJECT ID>      The GCP project ID where the services will
                                    be deployed
  -c|--cluster-name <CLUSTER NAME>  The name of the GKE cluster

FLAGS:
  -h                                Shows this help text

EXAMPLES:
The following invocation installs GKE, ASM and deploys bookinfo:
  $> ${SCRIPT_NAME} install
EOF
}

# This function checks <command -option|--option argument>
# If no argument is supplied, it fails
arg_required() {
  if [[ ! "${2:-}" || "${2:0:1}" = '-' ]]; then
    echo "Option ${1} requires an argument."
  fi
}

parse_command() {
  # shellcheck disable=SC2064
  trap "$(shopt -p nocasematch)" RETURN
  shopt -s nocasematch

  case "${1}" in
  install)
    if [ -z "${PROJECT_ID}" ]; then
      echo "Error: you must set a GCP project. Try doing \'gcloud config set project <projectname>\' before running the script."
    else
      main::install
    fi
    ;;
  destroy | uninstall | remove)
    main::destroy
    ;;
  show-config | show_config)
    main::show_config
    ;;
  *) #Catch empty or not listed command
    if [ -z "${1}" ]; then
      echo "Error: command not supplied, try again."
    else
      echo "Error: invalid command \"${1}\""
      echo ""
      main::usage
    fi
    ;;
  esac
  exit
}

parse_args() {
  # shellcheck disable=SC2064
  trap "$(shopt -p nocasematch)" RETURN
  shopt -s nocasematch

  while [[ $# != 0 ]]; do
    case "${1}" in
    -p | --project_id)
      arg_required "${@}"
      PROJECT_ID="${2}"
      shift 2
      ;;
    -c | --cluster_name | --cluster-name)
      arg_required "${@}"
      CLUSTER_NAME="${2}"
      shift 2
      ;;
    -r | --cluster_zone | --cluster-zone)
      arg_required "${@}"
      CLUSTER_ZONE="${2}"
      shift 2
      ;;
    -h | --help)
      main::usage
      exit
      ;;
    --* | -*=)
      echo "Error: unsupported flag ${1}" >&2
      exit 1
      ;;
    *)
      PARAMS+=("${1}")
      shift
      ;;
    esac
  done
}

main() {
  parse_args "${@}"
  parse_command "${PARAMS[*]}"
  config::update_vars
}

main "${@}"